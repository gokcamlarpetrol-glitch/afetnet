version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: afetnet
      POSTGRES_USER: afetnet
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-afetnet_dev}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U afetnet -d afetnet"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: .
    environment:
      - DATABASE_URL=postgresql://afetnet:${POSTGRES_PASSWORD:-afetnet_dev}@postgres:5432/afetnet
      - REDIS_URL=redis://redis:6379
      - API_BASE_URL=${API_BASE_URL:-http://localhost:8000}
      - WS_BASE_URL=${WS_BASE_URL:-ws://localhost:8000}
      - SECRET_KEY=${SECRET_KEY:-dev_secret_key_change_in_production}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app
      - ./logs:/app/logs
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  worker:
    build: .
    environment:
      - DATABASE_URL=postgresql://afetnet:${POSTGRES_PASSWORD:-afetnet_dev}@postgres:5432/afetnet
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY:-dev_secret_key_change_in_production}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app
    command: celery -A app.worker worker --loglevel=info

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend

volumes:
  postgres_data:
  redis_data:
