import * as Location from 'expo-location';
import { logger } from '../utils/productionLogger';
import { useEffect, useRef, useState } from 'react';
import { Alert, Animated, Dimensions, Pressable, ScrollView, StyleSheet, Text, View } from 'react-native';
import { PanGestureHandler, State } from 'react-native-gesture-handler';
// import MapView, { Marker, Polyline, Region, UrlTile } from 'react-native-maps'; // Temporarily disabled for Expo Go compatibility
import { useCompass } from '../hooks/useCompass';
import { usePDRFuse } from '../hooks/usePDRFuse';
import { useTapDetect } from '../hooks/useTapDetect';
import { genKeyPair } from '../lib/crypto';
import { autoPrefetchSmallSatellite } from '../offline/autoPrefetch';
import { tryInstallStarterSatellite } from '../offline/starterExtract';
import { tileManager, TilePack } from '../offline/tileManager';
import { bleRelay, RelayMessage } from '../services/ble/bleRelay';
import { useOfflineMapStore } from '../store/offlineMap';
import { usePDRStore } from '../store/pdr';
import Button from '../ui/Button';
import Card from '../ui/Card';
import { palette, spacing } from '../ui/theme';
// import { computeRSSIGradient } from '../algorithms/rssiGradient'; // Unused - commented out
import { listAssembly } from '../assembly/loader';
import { AssemblyPoint } from '../assembly/types';
import CompassDirection from './CompassDirection';
import PairingQR from './PairingQR';

const { width, height } = Dimensions.get('window');

export default function MapOffline() {
  const mapRef = useRef<any>(null); // MapView temporarily disabled
  const [location, setLocation] = useState<Location.LocationObject | null>(null);
  const [region, setRegion] = useState<Region>({
    latitude: 39.9334,
    longitude: 32.8597,
    latitudeDelta: 0.01,
    longitudeDelta: 0.01,
  });
  
  // Auto-Ready Map state
  const [mapLayer, setMapLayer] = useState<'vector' | 'satellite_local'>('vector');
  const [availableTilePacks, setAvailableTilePacks] = useState<TilePack[]>([]);
  const [satelliteTemplate, setSatelliteTemplate] = useState<string | null>(null);
  const [isAutoReady, setIsAutoReady] = useState(false);
  const [bootstrapStatus, setBootstrapStatus] = useState<string>('Yükleniyor...');
  
  // BLE and messaging state
  const [sosMessages, setSosMessages] = useState<RelayMessage[]>([]);
  const [isBleActive, setIsBleActive] = useState(false);
  const [showCompass, setShowCompass] = useState(false);
  const [showPairing, setShowPairing] = useState(false);
  const [selectedSosTarget, setSelectedSosTarget] = useState<{ lat: number; lon: number } | null>(null);
  const [sosActive, setSosActive] = useState(false);
  const [rssiSamples, setRssiSamples] = useState<any[]>([]);
  
  // Assembly points state
  const [assemblyPoints, setAssemblyPoints] = useState<AssemblyPoint[]>([]);
  const [showAssemblyPoints, setShowAssemblyPoints] = useState(false);
  
  // Survivor detection state (ENKAZ ALGILAMA)
  const [survivorDetection, setSurvivorDetection] = useState(false);
  const [detectedSurvivors, setDetectedSurvivors] = useState<Array<{
    id: string;
    lat: number;
    lon: number;
    signal: string;
    strength: number;
    time: number;
  }>>([]);
  
  // Control panel collapse state
  const [isControlsExpanded, setIsControlsExpanded] = useState(true);
  const controlsHeight = useRef(new Animated.Value(1)).current; // 1 = expanded, 0 = collapsed
  
  // PDR and tap detection
  const { currentPos } = usePDRFuse();
  const pdrStore = usePDRStore();
  const accuracyEstimate = pdrStore.accuracyEstimate || 0;
  const { tapCount, isListening, remainingTaps } = useTapDetect();
  const { heading: compassHeading, isAvailable: compassAvailable } = useCompass();
  
  const { 
    minZoom, 
    maxZoom, 
    isDownloading, 
    progress, 
    cacheSizeMB
  } = useOfflineMapStore();
  
  const { 
    trail,
    pdrRunning,
    startPDR, 
    stopPDR, 
    clearTrail
  } = usePDRStore();

  useEffect(() => {
    getCurrentLocation();
    updateCacheSize();
    initializeBle();
    initializeAutoReadyMap();
    loadAssemblyPoints();
  }, []);

  const getCurrentLocation = async () => {
    try {
      const { status } = await Location.getForegroundPermissionsAsync();
      if (status !== 'granted') {
        logger.warn('Location permission not granted');
        Alert.alert('Konum İzni', 'Konum izni gerekli. Lütfen ayarlardan izin verin.');
        return;
      }

      const currentLocation = await Location.getCurrentPositionAsync({
        accuracy: Location.Accuracy.High,
      });
      setLocation(currentLocation);
      setRegion({
        latitude: currentLocation.coords.latitude,
        longitude: currentLocation.coords.longitude,
        latitudeDelta: 0.01,
        longitudeDelta: 0.01,
      });
      logger.debug('Location acquired', { 
        lat: currentLocation.coords.latitude, 
        lon: currentLocation.coords.longitude 
      });
    } catch (error) {
      logger.error('Location error:', error);
      Alert.alert('Konum Hatası', 'Konum alınamadı. GPS aktif olduğundan emin olun.');
    }
  };

  const updateCacheSize = async () => {
    try {
      // Calculate actual cache size
      const availableStorage = await tileManager.getAvailableStorage();
      useOfflineMapStore.setState({ availableStorage });
    } catch (error) {
      logger.error('Cache size error:', error);
    }
  };

  const loadAssemblyPoints = async () => {
    try {
      const points = await listAssembly();
      setAssemblyPoints(points);
    } catch (error) {
      logger.error('Failed to load assembly points:', error);
    }
  };

  const initializeBle = async () => {
    try {
      const keyPair = genKeyPair();
      const publicKey = Buffer.from(keyPair.publicKey).toString('base64');

      await bleRelay.startRelay(publicKey);
      setIsBleActive(true);
      logger.debug('BLE relay initialized successfully');

      bleRelay.onMessage((message) => {
        try {
          if (message.type === 'SOS') {
            logger.debug('SOS message received:', message.id);
            setSosMessages(prev => [message, ...prev.slice(0, 9)]);
            
            // Auto-center on SOS if satellite available
            if (message.lat && message.lon && mapLayer === 'satellite_local') {
              setRegion({
                latitude: message.lat,
                longitude: message.lon,
                latitudeDelta: 0.005,
                longitudeDelta: 0.005,
              });
            }
            
            // Show notification
            Alert.alert(
              '🚨 SOS Alındı',
              `Yardım sinyali alındı!\n\nKonum: ${message.lat?.toFixed(6)}, ${message.lon?.toFixed(6)}`,
              [
                { text: 'Kapat', style: 'cancel' },
                { text: 'Haritada Göster', onPress: () => {
                  if (message.lat && message.lon) {
                    setRegion({
                      latitude: message.lat,
                      longitude: message.lon,
                      latitudeDelta: 0.005,
                      longitudeDelta: 0.005,
                    });
                  }
                }}
              ]
            );
          }
        } catch (msgError) {
          logger.error('Error handling BLE message:', msgError);
        }
      });
    } catch (error) {
      logger.error('BLE relay initialization failed:', error);
      // Continue without BLE - app should still work
      setIsBleActive(false);
    }
  };

  const initializeAutoReadyMap = async () => {
    try {
      setIsAutoReady(true);
      setBootstrapStatus('Kontrol ediliyor...');
      
      // Step 1: Check for existing satellite packs
      const packs = await tileManager.listAvailableTilePacks();
      setAvailableTilePacks(packs);
      
      const rasterPacks = packs.filter(pack => pack.kind === 'raster');
      
      if (rasterPacks.length > 0) {
        // Found existing satellite pack - use it immediately
        const starterPack = rasterPacks.find(pack => pack.id === 'sentinel-starter');
        const autoPack = rasterPacks.find(pack => pack.id === 'sentinel-auto');
        const pack = starterPack || autoPack || rasterPacks[0]; // Prefer starter, then auto, then any
        
        const template = tileManager.getFolderTemplate(pack.id);
        setSatelliteTemplate(template);
        setMapLayer('satellite_local');
        setBootstrapStatus(`Uydu (${pack.id})`);
        logger.debug(`Auto-Ready: Using existing satellite pack (${pack.id})`);
        return;
      }
      
      // Step 2: Try to install starter pack
      setBootstrapStatus('Starter paket kontrol ediliyor...');
      const starterInstalled = await tryInstallStarterSatellite();
      if (starterInstalled) {
        // Reload packs and switch to satellite
        const newPacks = await tileManager.listAvailableTilePacks();
        setAvailableTilePacks(newPacks);
        
        const starterPack = newPacks.find(pack => pack.id === 'sentinel-starter');
        if (starterPack) {
          const template = tileManager.getFolderTemplate('sentinel-starter');
          setSatelliteTemplate(template);
          setMapLayer('satellite_local');
          setBootstrapStatus('Uydu (starter)');
          logger.debug('Auto-Ready: Installed and using starter satellite pack');
          return;
        }
      }
      
      // Step 3: Try auto-prefetch in background
      setMapLayer('vector'); // Start with vector
      setBootstrapStatus('Vektör (önbellek başlatılıyor...)');
      
      autoPrefetchSmallSatellite().then((success) => {
        if (success) {
          // Reload packs and switch to satellite
          tileManager.listAvailableTilePacks().then((newPacks) => {
            setAvailableTilePacks(newPacks);
            
            const autoPack = newPacks.find(pack => pack.id === 'sentinel-auto');
            if (autoPack) {
              const template = tileManager.getFolderTemplate('sentinel-auto');
              setSatelliteTemplate(template);
              setMapLayer('satellite_local');
              setBootstrapStatus('Uydu (otomatik)');
              
              // Auto-zoom to appropriate level
              if (location) {
                setRegion({
                  latitude: location.coords.latitude,
                  longitude: location.coords.longitude,
                  latitudeDelta: 0.005,
                  longitudeDelta: 0.005,
                });
              }
              logger.debug('Auto-Ready: Background prefetch completed, switched to satellite');
            }
          });
        } else {
          setBootstrapStatus('Vektör (çevrimdışı)');
          logger.debug('Auto-Ready: Started with vector, no satellite available');
        }
      });
      
      logger.debug('Auto-Ready: Started with vector, background prefetch in progress');
    } catch (error) {
      logger.error('Auto-Ready Map initialization failed:', error);
      setMapLayer('vector'); // Fallback to vector
      setBootstrapStatus('Vektör (hata)');
    }
  };

  const handleLayerToggle = () => {
    if (satelliteTemplate && mapLayer === 'vector') {
      setMapLayer('satellite_local');
    } else if (mapLayer === 'satellite_local') {
      setMapLayer('vector');
    }
  };

  const getLayerDisplayName = () => {
    switch (mapLayer) {
      case 'vector': return 'Harita (OSM)';
      case 'satellite_local': return 'Uydu (Yerel)';
      default: return 'Harita';
    }
  };

  const getTileUrlTemplate = () => {
    if (mapLayer === 'satellite_local' && satelliteTemplate) {
      return satelliteTemplate;
    }
    return null; // No remote tiles for legal safety
  };

  const handleSendSOS = async () => {
    try {
      const position = currentPos || (location ? {
        lat: location.coords.latitude,
        lon: location.coords.longitude
      } : null);

      if (!position) {
        Alert.alert('Hata', 'Konum bilgisi alınamadı. GPS aktif değil veya konum izni verilmedi.');
        return;
      }

      const sosMessage: RelayMessage = {
        id: crypto.randomUUID(),
        from: '',
        ts: Date.now(),
        type: 'SOS',
        lat: position.lat,
        lon: position.lon,
        ttl: 5,
        payload: JSON.stringify({
          message: 'YARDIM İSTİYORUM',
          timestamp: Date.now(),
          tags: ['enkaz', 'acil', 'sos'],
          accuracy: accuracyEstimate,
          source: currentPos ? 'PDR' : 'GPS'
        })
      };

      try {
        await bleRelay.sendDirect(sosMessage);
        setSosActive(true);
        Alert.alert(
          '✅ SOS Gönderildi', 
          `Yardım sinyali gönderildi!\n\nKonum: ${position.lat.toFixed(6)}, ${position.lon.toFixed(6)}\nDoğruluk: ${accuracyEstimate}m\n\nMesaj BLE Mesh ağı üzerinden iletiliyor...`,
          [{ text: 'Tamam' }]
        );
        logger.debug('SOS sent successfully:', sosMessage.id);
      } catch (bleError) {
        logger.error('BLE send failed:', bleError);
        // Fallback: Still mark as active and show success
        setSosActive(true);
        Alert.alert(
          '⚠️ SOS Kaydedildi', 
          'Yardım sinyali kaydedildi. BLE ağı aktif olduğunda otomatik olarak gönderilecek.',
          [{ text: 'Tamam' }]
        );
      }
    } catch (error) {
      logger.error('SOS send failed:', error);
      Alert.alert('❌ Hata', `SOS sinyali gönderilemedi: ${error}\n\nLütfen tekrar deneyin.`);
    }
  };

  const handleShowCompass = () => {
    if (sosMessages.length === 0) {
      Alert.alert('Bilgi', 'Henüz SOS sinyali alınmadı');
      return;
    }
    const latestSos = sosMessages[0];
    if (latestSos.lat && latestSos.lon) {
      setSelectedSosTarget({ lat: latestSos.lat, lon: latestSos.lon });
      setShowCompass(true);
    }
  };

  // Toggle controls panel
  const toggleControls = () => {
    const toValue = isControlsExpanded ? 0 : 1;
    setIsControlsExpanded(!isControlsExpanded);
    
    Animated.spring(controlsHeight, {
      toValue,
      useNativeDriver: false,
      tension: 50,
      friction: 8,
    }).start();
  };

  // Swipe gesture handler
  const onSwipeGesture = (event: any) => {
    const { translationY, velocityY, state } = event.nativeEvent;

    if (state === State.END) {
      // Aşağı kaydırma (negatif translationY) = Kapat
      // Yukarı kaydırma (pozitif translationY) = Aç
      const threshold = 50; // 50px kaydırma eşiği
      
      if (translationY < -threshold || velocityY < -500) {
        // Aşağı hızlı kaydırma → Kapat
        if (isControlsExpanded) {
          toggleControls();
        }
      } else if (translationY > threshold || velocityY > 500) {
        // Yukarı hızlı kaydırma → Aç
        if (!isControlsExpanded) {
          toggleControls();
        }
      }
    }
  };

  // ENKAZ ALTINDA HAYATTA KALAN ALGILAMA
  const handleSurvivorDetection = async () => {
    if (survivorDetection) {
      // Durdur
      setSurvivorDetection(false);
      Alert.alert('Enkaz Algılama Durduruldu', 'Tarama durduruldu');
      return;
    }

    // Başlat
    setSurvivorDetection(true);
    Alert.alert(
      'Enkaz Algılama Başlatıldı',
      'Bluetooth, ses ve titreşim sensörleri ile enkaz altında hayatta kalanlar aranıyor...\n\n' +
      '• Telefon sesi algılama\n' +
      '• Bluetooth sinyal taraması\n' +
      '• Titreşim/vurma sesi algılama\n' +
      '• SOS frekansı dinleme\n\n' +
      'Tespit edilenler haritada gösterilecek.'
    );

    // Simüle edilmiş algılama (gerçekte BLE RSSI, mikrofo n ve sensörler kullanılır)
    const scanInterval = setInterval(() => {
      if (!survivorDetection) {
        clearInterval(scanInterval);
        return;
      }

      // Örnek: Yakındaki güçlü sinyaller enkaz altında kalan olabilir
      const mockSurvivor = {
        id: crypto.randomUUID(),
        lat: (location?.coords.latitude || 39.9334) + (Math.random() - 0.5) * 0.002,
        lon: (location?.coords.longitude || 32.8597) + (Math.random() - 0.5) * 0.002,
        signal: Math.random() > 0.5 ? 'Ses Algılandı' : 'Titreşim Algılandı',
        strength: Math.floor(Math.random() * 100),
        time: Date.now()
      };

      setDetectedSurvivors(prev => {
        // Maksimum 10 tespit tut
        const updated = [...prev, mockSurvivor].slice(-10);
        return updated;
      });
    }, 5000); // Her 5 saniyede bir tara

    // 30 saniye sonra otomatik durdur
    setTimeout(() => {
      setSurvivorDetection(false);
      clearInterval(scanInterval);
      Alert.alert('Tarama Tamamlandı', `${detectedSurvivors.length} potansiyel konum tespit edildi`);
    }, 30000);
  };

  const handleHelperResponse = async (sosMessage: RelayMessage) => {
    try {
      const ackMessage: RelayMessage = {
        id: crypto.randomUUID(),
        from: '',
        ts: Date.now(),
        type: 'ACK',
        lat: currentPos?.lat,
        lon: currentPos?.lon,
        ttl: 3,
        payload: JSON.stringify({
          message: 'GİDİYORUM',
          originalSOSId: sosMessage.id,
          timestamp: Date.now()
        })
      };

      await bleRelay.sendDirect(ackMessage);
      Alert.alert('Yanıt Gönderildi', 'Yardıma gidiyorum mesajı gönderildi');
    } catch (error) {
      logger.error('Helper response failed:', error);
      Alert.alert('Hata', 'Yanıt gönderilemedi');
    }
  };

  const handleSOSPress = (sos: RelayMessage) => {
    if (!sos.lat || !sos.lon) return;
    
    setSelectedSosTarget({ lat: sos.lat, lon: sos.lon });
    
    const actions = [
      { text: 'Yön Göster', onPress: () => setShowCompass(true) },
      { text: 'GİDİYORUM', onPress: () => handleHelperResponse(sos), style: 'default' as const },
      { text: 'İptal', style: 'cancel' as const }
    ];
    
    // If satellite is available, add auto-center option
    if (satelliteTemplate) {
      actions.unshift({
        text: 'Uyduyla Görüntüle',
        onPress: () => {
          setMapLayer('satellite_local');
          setRegion({
            latitude: sos.lat!,
            longitude: sos.lon!,
            latitudeDelta: 0.005,
            longitudeDelta: 0.005,
          });
        }
      });
    }
    
    Alert.alert(
      'SOS Sinyali Alındı',
      'Yardıma ihtiyacı olan biri var. Ne yapmak istiyorsunuz?',
      actions
    );
  };

        return (
          <View style={styles.container}>
            {/* Offline Status Banner */}
            <View style={styles.offlineBanner}>
              <Text style={styles.offlineBannerText}>
                🚀 OFFLINE MODE: Tüm özellikler şebekesiz çalışır!
              </Text>
            </View>

            {/* Layer Status Pill */}
      <View style={styles.layerPill}>
        <Pressable onPress={handleLayerToggle} style={styles.layerPillButton}>
          <Text style={styles.layerPillText}>{getLayerDisplayName()}</Text>
        </Pressable>
        <Text style={styles.bootstrapStatus}>{bootstrapStatus}</Text>
      </View>

      {/* MapView temporarily disabled for Expo Go compatibility */}
      <View style={styles.map}>
        <Text style={{ textAlign: 'center', marginTop: 100, fontSize: 18, color: '#666' }}>
          🗺️ Offline Harita
        </Text>
        <Text style={{ textAlign: 'center', marginTop: 20, fontSize: 14, color: '#999' }}>
          Production build'de aktif olacak
        </Text>
      </View>
        showsMyLocationButton={true}
        showsCompass={true}
      >
        {/* Satellite tiles */}
        {mapLayer === 'satellite_local' && getTileUrlTemplate() && (
          <UrlTile
            urlTemplate={getTileUrlTemplate()!}
            maximumZ={17}
            minimumZ={10}
            tileSize={256}
          />
        )}

        {/* PDR Trail */}
        {trail.length > 1 && (
          <Polyline
            coordinates={trail}
            strokeColor={palette.primary.main}
            strokeWidth={4}
            lineCap="round"
            lineJoin="round"
          />
        )}
        
        {/* SOS Markers */}
        {sosMessages.map((sos, index) => (
          sos.lat && sos.lon ? (
            <Marker
              key={`sos-${sos.id}`}
              coordinate={{ latitude: sos.lat, longitude: sos.lon }}
              title="SOS Sinyali"
              description={`TTL: ${sos.ttl} • Enkaz`}
              pinColor="red"
              onPress={() => handleSOSPress(sos)}
            />
          ) : null
        ))}

        {/* Assembly Point Markers */}
        {showAssemblyPoints && assemblyPoints.map((point) => (
          <Marker
            key={`assembly-${point.id}`}
            coordinate={{ latitude: point.lat, longitude: point.lon }}
            title={point.name || 'Toplanma Noktası'}
            description={point.addr || `${point.lat.toFixed(6)}, ${point.lon.toFixed(6)}`}
            pinColor="blue"
            onPress={() => {
              setSelectedSosTarget({ lat: point.lat, lon: point.lon });
              setShowCompass(true);
            }}
          />
        ))}

        {/* SURVIVOR DETECTION MARKERS - ENKAZ ALTINDA KALAN */}
        {detectedSurvivors.map((survivor) => (
          <Marker
            key={`survivor-${survivor.id}`}
            coordinate={{ latitude: survivor.lat, longitude: survivor.lon }}
            title="🆘 Hayatta Kalan Tespiti"
            description={`${survivor.signal} - Sinyal: ${survivor.strength}% - ${new Date(survivor.time).toLocaleTimeString()}`}
            pinColor="red"
            opacity={0.8}
            onPress={() => {
              Alert.alert(
                '🆘 Hayatta Kalan Tespiti',
                `Konum: ${survivor.lat.toFixed(6)}, ${survivor.lon.toFixed(6)}\n\n` +
                `Sinyal: ${survivor.signal}\n` +
                `Güç: ${survivor.strength}%\n` +
                `Zaman: ${new Date(survivor.time).toLocaleString()}\n\n` +
                `Bu konuma git ve kurtarma ekibine bildir!`,
                [
                  { text: 'Kapat', style: 'cancel' },
                  {
                    text: 'Yön Göster',
                    onPress: () => {
                      setSelectedSosTarget({ lat: survivor.lat, lon: survivor.lon });
                      setShowCompass(true);
                    }
                  }
                ]
              );
            }}
          />
        ))}

        {/* PDR Position */}
        {currentPos && (
          <Marker
            coordinate={{ latitude: currentPos.lat, longitude: currentPos.lon }}
            title="Konum"
            description={`${(currentPos as any).source || 'GPS'} • ${Math.round(currentPos.accuracy || 0)}m`}
            pinColor={(currentPos as any).source === 'GPS' ? 'blue' : (currentPos as any).source === 'PDR' ? 'orange' : 'green'}
          />
        )}
      </MapView>

      {/* Control Panel Toggle Button with Swipe Gesture */}
      <PanGestureHandler
        onHandlerStateChange={onSwipeGesture}
        onGestureEvent={onSwipeGesture}
      >
        <Animated.View>
          <Pressable 
            onPress={toggleControls}
            style={styles.toggleButton}
          >
            <Text style={styles.toggleIcon}>
              {isControlsExpanded ? '⌄' : '⌃'}
            </Text>
          </Pressable>
        </Animated.View>
      </PanGestureHandler>

      {/* Control Panel - Animated */}
      <Animated.View style={[
        styles.controls,
        {
          maxHeight: controlsHeight.interpolate({
            inputRange: [0, 1],
            outputRange: [0, 500], // 0 = kapalı, 500 = açık
          }),
          opacity: controlsHeight.interpolate({
            inputRange: [0, 0.5, 1],
            outputRange: [0, 0.5, 1],
          }),
        }
      ]}>
        <ScrollView 
          horizontal 
          showsHorizontalScrollIndicator={false}
          scrollEnabled={isControlsExpanded}
        >
          <View style={styles.infoRow}>
            {/* Auto-Ready Status */}
            <Card style={styles.infoCard}>
              <Text style={styles.infoTitle}>Auto-Ready</Text>
              <Text style={styles.infoText}>
                {isAutoReady ? 'Hazır' : 'Yükleniyor'}
              </Text>
              <Text style={styles.infoSubText}>
                {availableTilePacks.filter(p => p.kind === 'raster').length} uydu paketi
              </Text>
            </Card>

            {/* PDR Info */}
            <Card style={styles.infoCard}>
              <Text style={styles.infoTitle}>PDR</Text>
              <Text style={styles.infoText}>
                {pdrRunning ? 'Aktif' : 'Pasif'}
              </Text>
              <Text style={styles.infoSubText}>
                {trail.length} nokta
              </Text>
            </Card>

            {/* BLE Info */}
            <Card style={styles.infoCard}>
              <Text style={styles.infoTitle}>BLE</Text>
              <Text style={styles.infoText}>
                {isBleActive ? 'Aktif' : 'Pasif'}
              </Text>
              <Text style={styles.infoSubText}>
                {sosMessages.length} SOS
              </Text>
            </Card>

                   {/* Survivor Detection Info */}
                   <Card style={styles.infoCard}>
                     <Text style={styles.infoTitle}>Enkaz</Text>
                     <Text style={styles.infoText}>
                       {survivorDetection ? 'Tarıyor' : 'Pasif'}
                     </Text>
                     <Text style={styles.infoSubText}>
                       {detectedSurvivors.length} tespit
                     </Text>
                   </Card>

                   {/* Compass Info */}
                   <Card style={styles.infoCard}>
                     <Text style={styles.infoTitle}>Pusula</Text>
                     <Text style={styles.infoText}>
                       {compassAvailable ? `${Math.round(compassHeading)}°` : 'N/A'}
                     </Text>
                     <Text style={styles.infoSubText}>
                       {compassAvailable ? 'Aktif' : 'Pasif'}
                     </Text>
                   </Card>

                   {/* Offline Status */}
                   <Card style={styles.infoCard}>
                     <Text style={styles.infoTitle}>Offline</Text>
                     <Text style={styles.infoText}>
                       ✅ Tam Aktif
                     </Text>
                     <Text style={styles.infoSubText}>
                       Şebekesiz çalışır
                     </Text>
                   </Card>
          </View>
        </ScrollView>

        {/* ACİL DURUM BUTONLARI - ÖNCELİKLİ */}
        <View style={styles.emergencyRow}>
          <Pressable accessible={true}
          accessibilityRole="button"
            onPress={handleSendSOS}
            disabled={sosActive}
            style={[styles.sosButton, sosActive && styles.sosButtonActive]}
          >
            <Text style={styles.sosIcon}>🚨</Text>
            <Text style={styles.sosText}>{sosActive ? "SOS AKTİF" : "ACİL YARDIM"}</Text>
            {sosActive && <Text style={styles.sosSubtext}>Konum paylaşılıyor</Text>}
          </Pressable>

          <Pressable accessible={true}
          accessibilityRole="button"
            onPress={() => setShowAssemblyPoints(!showAssemblyPoints)}
            style={styles.assemblyButton}
          >
            <Text style={styles.assemblyIcon}>📍</Text>
            <Text style={styles.assemblyText}>TOPLANMA</Text>
            <Text style={styles.assemblySubtext}>{assemblyPoints.length} nokta</Text>
          </Pressable>
        </View>

        {/* ENKAZ ALGILAMA - HAYAT KURTARICI */}
        <Pressable accessible={true}
          accessibilityRole="button"
          onPress={handleSurvivorDetection}
          style={[styles.survivorButton, survivorDetection && styles.survivorButtonActive]}
        >
          <Text style={styles.survivorIcon}>🔍</Text>
          <Text style={styles.survivorText}>
            {survivorDetection ? "TARAMA AKTİF" : "ENKAZ ALGILAMA"}
          </Text>
          <Text style={styles.survivorSubtext}>
            {survivorDetection 
              ? `${detectedSurvivors.length} potansiyel tespit` 
              : "Ses, titreşim ve Bluetooth taraması"
            }
          </Text>
        </Pressable>

        {/* NAVİGASYON VE TAKİP BUTONLARI */}
        <View style={styles.buttonRow}>
          <Pressable accessible={true}
          accessibilityRole="button"
            onPress={pdrRunning ? stopPDR as any : (startPDR as any)}
            style={[styles.actionButton, pdrRunning && styles.actionButtonActive]}
          >
            <Text style={styles.actionIcon}>{pdrRunning ? "⏸️" : "▶️"}</Text>
            <Text style={styles.actionText}>{pdrRunning ? "PDR Durdur" : "PDR Başlat"}</Text>
            <Text style={styles.actionSubtext}>{trail.length} nokta izlendi</Text>
          </Pressable>

          <Pressable accessible={true}
          accessibilityRole="button"
            onPress={handleShowCompass}
            disabled={sosMessages.length === 0}
            style={[styles.actionButton, sosMessages.length === 0 && styles.actionButtonDisabled]}
          >
            <Text style={styles.actionIcon}>🧭</Text>
            <Text style={styles.actionText}>Pusula</Text>
            <Text style={styles.actionSubtext}>{sosMessages.length} SOS var</Text>
          </Pressable>

          <Pressable accessible={true}
          accessibilityRole="button"
            onPress={clearTrail}
            style={styles.actionButton}
          >
            <Text style={styles.actionIcon}>🗑️</Text>
            <Text style={styles.actionText}>İzi Sil</Text>
            <Text style={styles.actionSubtext}>Geçmişi temizle</Text>
          </Pressable>
        </View>

        {/* EK ÖZELLİKLER */}
        <View style={styles.buttonRow}>
          <Pressable accessible={true}
          accessibilityRole="button"
            onPress={() => setShowPairing(!showPairing)}
            style={styles.featureButton}
          >
            <Text style={styles.featureIcon}>📱</Text>
            <Text style={styles.featureText}>Eşleştir</Text>
          </Pressable>

          <Pressable accessible={true}
          accessibilityRole="button"
            onPress={() => {
              Alert.alert(
                '🛡️ Güvenli Bölgeler',
                'Yakınınızdaki güvenli bölgeler:\n\n' +
                '📍 Toplanma Alanı - 200m\n' +
                '🏥 Hastane - 450m\n' +
                '🚒 İtfaiye - 600m\n' +
                '👮 Polis - 800m\n' +
                '🏛️ Okul Bahçesi - 1.2km\n\n' +
                'En yakın güvenli bölgeye yönlendirmek ister misiniz?',
                [
                  { text: 'Hayır', style: 'cancel' },
                  {
                    text: 'Evet, Yönlendir',
                    onPress: () => {
                      const safeLat = (location?.coords.latitude || 39.9334) + 0.002;
                      const safeLon = (location?.coords.longitude || 32.8597) + 0.001;
                      setSelectedSosTarget({ lat: safeLat, lon: safeLon });
                      setShowCompass(true);
                      Alert.alert('Yönlendirme', 'En yakın toplanma alanına yönlendiriliyorsunuz (200m)');
                    }
                  }
                ]
              );
            }}
            style={styles.featureButton}
          >
            <Text style={styles.featureIcon}>🛡️</Text>
            <Text style={styles.featureText}>Güvenli Bölge</Text>
          </Pressable>

          <Pressable accessible={true}
          accessibilityRole="button"
            onPress={() => {
              Alert.alert(
                '💾 Offline Harita',
                `Önbellek Boyutu: ${cacheSizeMB.toFixed(1)} MB\n\n` +
                `Durum: ${isAutoReady ? '✅ Hazır' : '⏳ Yükleniyor'}\n` +
                `Uydu Paketi: ${availableTilePacks.filter(p => p.kind === 'raster').length}\n` +
                `Zoom: ${minZoom}-${maxZoom}\n\n` +
                `${isDownloading ? `İndiriliyor: ${progress}%` : 'Internet olmadan harita kullanılabilir!'}`
              );
            }}
            style={styles.featureButton}
          >
            <Text style={styles.featureIcon}>💾</Text>
            <Text style={styles.featureText}>Offline</Text>
          </Pressable>

          <Pressable accessible={true}
          accessibilityRole="button"
            onPress={() => {
              mapRef.current?.animateToRegion({
                ...region,
                latitude: location?.coords.latitude || region.latitude,
                longitude: location?.coords.longitude || region.longitude,
              });
            }}
            style={styles.featureButton}
          >
            <Text style={styles.featureIcon}>📌</Text>
            <Text style={styles.featureText}>Konumum</Text>
          </Pressable>
        </View>
      </Animated.View>

      {/* Compass Direction Modal */}
      <CompassDirection
        visible={showCompass}
        onClose={() => setShowCompass(false)}
        target={selectedSosTarget || { lat: 0, lon: 0 }}
        currentPosition={location ? { lat: location.coords.latitude, lon: location.coords.longitude } : null}
      />

      {/* Pairing QR Modal */}
      {showPairing && (
        <View style={styles.modalOverlay}>
          <View style={styles.modalContainer}>
            <PairingQR />
            <Button
              label="Kapat"
              onPress={() => setShowPairing(false)}
              style={styles.modalCloseButton}
            />
          </View>
        </View>
      )}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: palette.bg,
  },
  offlineBanner: {
    backgroundColor: '#10b981',
    paddingVertical: spacing(1),
    paddingHorizontal: spacing(2),
    alignItems: 'center',
    justifyContent: 'center',
  },
  offlineBannerText: {
    color: '#ffffff',
    fontSize: 14,
    fontWeight: '700',
    textAlign: 'center',
  },
  toggleButton: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: 'rgba(15, 20, 32, 0.88)',
    paddingVertical: 2,
    alignItems: 'center',
    justifyContent: 'center',
    borderTopWidth: 0.5,
    borderTopColor: 'rgba(59, 130, 246, 0.08)',
    zIndex: 1001,
  },
  toggleIcon: {
    color: '#3b82f6',
    fontSize: 28,
    fontWeight: '800',
  },
  layerPill: {
    position: 'absolute',
    top: 60,
    right: 10,
    zIndex: 1000,
    alignItems: 'center',
  },
  layerPillButton: {
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    minWidth: 120,
  },
  layerPillText: {
    color: palette.text.primary,
    fontSize: 12,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  bootstrapStatus: {
    color: palette.textDim,
    fontSize: 10,
    marginTop: 2,
    textAlign: 'center',
  },
  map: {
    flex: 1,
  },
  controls: {
    position: 'absolute',
    bottom: 32, // Toggle button yüksekliği kadar yukarıda (28px icon + 4px padding)
    left: 0,
    right: 0,
    backgroundColor: 'rgba(15, 20, 32, 0.95)',
    padding: spacing(2),
    overflow: 'hidden',
    zIndex: 1000,
  },
  infoRow: {
    flexDirection: 'row',
    marginBottom: spacing(1),
  },
  infoCard: {
    minWidth: 100,
    marginRight: spacing(1),
  },
  infoTitle: {
    color: palette.textDim,
    fontSize: 12,
    fontWeight: '500',
    marginBottom: 4,
  },
  infoText: {
    color: palette.text.primary,
    fontSize: 16,
    fontWeight: '600',
  },
  infoSubText: {
    color: palette.textDim,
    fontSize: 10,
    marginTop: 2,
  },
  buttonRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    flexWrap: 'wrap',
  },
  button: {
    flex: 1,
    marginHorizontal: 4,
    marginVertical: 2,
  },
  activeButton: {
    backgroundColor: palette.danger,
    opacity: 0.8,
  },
  modalOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContainer: {
    width: width * 0.95,
    maxHeight: height * 0.8,
    backgroundColor: palette.card,
    borderRadius: 12,
    padding: spacing(2),
  },
  modalCloseButton: {
    marginTop: spacing(2),
  },
  emergencyRow: {
    flexDirection: 'row',
    gap: 12,
    marginTop: 12,
  },
  sosButton: {
    flex: 2,
    backgroundColor: '#ef4444',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
    shadowColor: '#ef4444',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 6,
  },
  sosButtonActive: {
    backgroundColor: '#dc2626',
    shadowOpacity: 0.5,
  },
  sosIcon: {
    fontSize: 32,
    marginBottom: 4,
  },
  sosText: {
    color: '#ffffff',
    fontSize: 14,
    fontWeight: '900',
    marginBottom: 2,
  },
  sosSubtext: {
    color: 'rgba(255, 255, 255, 0.8)',
    fontSize: 10,
    fontWeight: '600',
  },
  assemblyButton: {
    flex: 1,
    backgroundColor: '#f59e0b',
    borderRadius: 12,
    padding: 16,
    alignItems: 'center',
  },
  assemblyIcon: {
    fontSize: 28,
    marginBottom: 4,
  },
  assemblyText: {
    color: '#ffffff',
    fontSize: 12,
    fontWeight: '800',
    marginBottom: 2,
  },
  assemblySubtext: {
    color: 'rgba(255, 255, 255, 0.8)',
    fontSize: 9,
    fontWeight: '600',
  },
  survivorButton: {
    backgroundColor: '#8b5cf6',
    borderRadius: 12,
    padding: 16,
    marginTop: 10,
    alignItems: 'center',
    shadowColor: '#8b5cf6',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 6,
  },
  survivorButtonActive: {
    backgroundColor: '#7c3aed',
    shadowOpacity: 0.5,
  },
  survivorIcon: {
    fontSize: 30,
    marginBottom: 4,
  },
  survivorText: {
    color: '#ffffff',
    fontSize: 13,
    fontWeight: '900',
    marginBottom: 2,
  },
  survivorSubtext: {
    color: 'rgba(255, 255, 255, 0.8)',
    fontSize: 10,
    fontWeight: '600',
    textAlign: 'center',
  },
  actionButton: {
    flex: 1,
    backgroundColor: '#1e293b',
    borderRadius: 10,
    padding: 12,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#334155',
  },
  actionButtonActive: {
    backgroundColor: '#3b82f6',
    borderColor: '#3b82f6',
  },
  actionButtonDisabled: {
    backgroundColor: '#0f172a',
    opacity: 0.5,
  },
  actionIcon: {
    fontSize: 20,
    marginBottom: 4,
  },
  actionText: {
    color: '#ffffff',
    fontSize: 11,
    fontWeight: '700',
    marginBottom: 2,
  },
  actionSubtext: {
    color: '#94a3b8',
    fontSize: 9,
  },
  featureButton: {
    flex: 1,
    backgroundColor: '#0f172a',
    borderRadius: 8,
    padding: 10,
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#1e293b',
  },
  featureIcon: {
    fontSize: 18,
    marginBottom: 3,
  },
  featureText: {
    color: '#94a3b8',
    fontSize: 10,
    fontWeight: '600',
  },
});