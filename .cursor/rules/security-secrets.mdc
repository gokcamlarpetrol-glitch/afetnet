---
description: Security best practices for emergency/disaster apps including encryption and secrets management
globs: ["src/**/*.{ts,tsx}", "app.config.ts", "eas.json", "**/*.env*"]
alwaysApply: true
---

# Security & Secrets Management

## Secret Management

* NEVER commit API keys, Firebase configs, EEW WebSocket URLs, or any secrets
* Use environment variables for configuration (not committed)
* Use expo-secure-store for sensitive data: keys, tokens, user IDs
* Example: `SecureStore.setItemAsync('token', value)` and `getItemAsync('token')`

## E2E Encryption

* Ensure ALL p2p and mesh messages use crypto/ modules
* Use `src/crypto/e2ee/` for end-to-end encryption
* Implement cryptographic key exchange protocols
* Never send plaintext sensitive data over any network

## Input Sanitization

* Sanitize ALL user inputs using `src/lib/sanitize.ts`
* Validate and escape user-generated content
* Prevent injection attacks (XSS, code injection)
* Use whitelist approach for validation

## Rate Limiting

* Implement rate limiting to prevent abuse of broadcast/beacon features
* Limit API calls, message sending, and resource-intensive operations
* Use exponential backoff for retries
* Monitor and log suspicious activity

## Military-Grade Security

* Leverage `src/services/MilitaryGradeSecurity` for critical operations
* Use advanced encryption for sensitive data
* Implement secure key management
* Follow security best practices for emergency communication

## Threat Model

* Follow the threat model in `docs/threat-model/`
* Regular security audits and penetration testing
* Keep dependencies updated for security patches
* Monitor CVE databases for known vulnerabilities

## Error Message Security

* NEVER leak sensitive information in error messages
* Use generic error messages for users
* Log detailed errors server-side only
* Example: "Authentication failed" not "Invalid password 'x' for user 'y'"

## Debug Logging Guards

* Use __DEV__ guards for any debug logging containing sensitive data
* Example:
  ```typescript
  if (__DEV__) {
    console.log('Debug info:', sensitiveData);
  }
  ```

## Firebase Security

* Keep Firebase configs secure and separate for dev/prod
* Use Firebase Security Rules for backend data protection
* Authenticate users properly before data access
* Encrypt sensitive data even in Firebase

## Bluetooth Security

* Secure BLE communications with encryption
* Implement proper pairing and authentication
* Use secure characteristics for sensitive data transfer
* See `src/ble/` for BLE security implementation

## Certificate Pinning

* Implement certificate pinning for API communications
* Prevent man-in-the-middle attacks
* Validate SSL/TLS certificates properly
* Use secure network libraries

## Background Security

* Secure background operations: `src/background/`
* Protect background tasks from unauthorized access
* Implement proper authentication for background sync
* Validate data integrity in background processing

## Family/Crypto Features

* Secure family features: `src/family/crypto.ts`
* Implement proper role-based access control
* Encrypt family communications end-to-end
* Validate permissions before operations

## Secure Storage

* Use expo-secure-store for ALL sensitive data
* Never use AsyncStorage for tokens, passwords, keys
* Clear sensitive data on app uninstall
* Implement secure key derivation

## Authentication

* Implement strong authentication mechanisms
* Use secure tokens with proper expiration
* Refresh tokens regularly
* Implement proper logout with token invalidation

## Code Security

* Review code for security vulnerabilities regularly
* Use static analysis tools for security scanning
* Implement least privilege principle
* Audit third-party dependencies for vulnerabilities

## Data Privacy

* Follow GDPR and privacy regulations
* Implement proper data retention policies
* Allow users to delete their data
* Document data collection in privacy policy: `docs/privacy-policy.html`

## Security Testing

* Test security features thoroughly
* Use automated security scanning tools
* Perform penetration testing before release
* Monitor for security incidents in production

## Incident Response

* Have an incident response plan
* Monitor for security breaches
* Implement secure logging for forensics
* Report vulnerabilities responsibly

## Bugbot Security Checks

* Never hardcode secrets in code; use environment variables
* Validate all network inputs with schema/guards
* Minimize permissions in AndroidManifest and iOS Info.plist
* Justify each permission in PR description
* Avoid eval() and dynamic code loading
* Review third-party libraries for vulnerabilities
* Log PII only in debug mode and redact sensitive data
