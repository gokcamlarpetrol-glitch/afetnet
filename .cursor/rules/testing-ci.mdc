---
description: Testing and CI expectations for automated quality gates
globs: ["**/*"]
alwaysApply: true
---

# Testing Rules

## PR Testing Requirements

* Each PR must include or update tests for changed logic
* Keep unit tests fast and isolated; <1s per test
* Snapshot/golden tests for UI components
* Mock external dependencies (network, storage, native modules)

## Code Coverage Targets

* Aim for >70% code coverage on critical paths
* Raise coverage bar for core modules (crypto, mesh, eew, security)
* Critical paths must have >90% coverage:
  * `src/crypto/` - encryption and security
  * `src/mesh/` - mesh networking logic
  * `src/eew/` - earthquake early warning
  * `src/ble/` - Bluetooth Low Energy
  * `src/services/` - critical services

## Test Organization

* Unit tests: `src/**/*.test.ts` for utilities and services
* Integration tests: `tests/integration/` for cross-module workflows
* E2E tests: `tests/e2e/` for critical user flows
* Component tests: Test React components with React Testing Library

## Test Quality

* Write descriptive test names
* Follow AAA pattern: Arrange, Act, Assert
* Keep tests focused and readable
* Test edge cases and error scenarios
* Avoid brittle tests that break on refactors

## Flaky Tests

* Quarantine flaky tests immediately
* Mark with `@jest/setTimeout` or skip annotation
* Open a follow-up issue to fix
* Don't merge until flakiness resolved

## Native Module Testing

* Mock native modules properly in tests
* Mock `react-native-ble-plx` for BLE tests
* Mock location, sensors, notifications
* Test both success and failure scenarios

## CI Pipeline

* CI runs on every PR automatically
* All checks must pass before merge:
  * `npm run lint` - ESLint
  * `npm run typecheck` - TypeScript
  * `npm run test` - Jest tests
  * `npm run healthcheck` - Health validation
* No skipped tests in production builds

## Test Performance

* Keep test suite total time < 5 minutes
* Parallelize tests when possible
* Use test watch mode for development
* Profile slow tests and optimize

## E2E Testing

* Critical user flows must have E2E tests:
  * SOS emergency feature
  * Mesh network pairing
  * Earthquake Early Warning alerts
  * Offline functionality
* Use detox or similar E2E framework
* Run on real devices or emulators

## Test Data

* Use factories or builders for test data
* Avoid hardcoded test data when possible
* Clean up test fixtures after tests
* Create reusable test utilities

## Coverage Reporting

* Upload coverage to codecov in CI
* Monitor coverage trends over time
* Don't let coverage drop below thresholds
* Review coverage reports regularly

## Testing Environment

* Test on multiple device sizes
* Test on iOS and Android separately
* Test with different permission states
* Test offline scenarios thoroughly

## Health Checks

* Run `npm run healthcheck` in CI
* Monitor critical services health
* Alert on health check failures
* Document health check requirements

## Continuous Testing

* Run full test suite before merge
* Don't bypass failing tests
* Fix test failures promptly
* Keep CI green at all times
