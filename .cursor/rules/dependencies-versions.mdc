---
description: Dependency and version management policy for stability and security
globs: ["package.json", "package-lock.json", "ios/Podfile.lock", "app.config.ts"]
alwaysApply: false
---

# Dependencies & Version Management

## Version Pinning

* Pin exact versions in package.json (no ^ or ~) for stability
* Avoid automatic version upgrades
* Document upgrade decisions
* Test thoroughly before upgrading

## Expo SDK Management

* Currently using Expo SDK 54.x
* Upgrade with `expo upgrade` command
* Read Expo release notes before upgrading
* Test all features after SDK upgrade

## React Native Version

* React Native 0.81.5 (tied to Expo SDK version)
* Don't upgrade RN independently of Expo
* Follow Expo's recommended RN version
* Test native modules after RN upgrade

## Node and npm

* Node >=18.0.0 (defined in engines)
* npm 10.7.0 (packageManager field)
* Enforce Node version with .nvmrc or engines
* Document Node version requirements

## Quarterly Reviews

* Review dependency updates quarterly
* Check for security vulnerabilities
* Evaluate new features in dependencies
* Plan upgrade timeline

## Security Patches

* Apply security patches ASAP
* Run `npm audit` regularly
* Run `npm audit fix` with caution
* Test security patches thoroughly

## Official Documentation

* Follow official documentation for each library
* Read migration guides for major upgrades
* Check breaking changes before upgrading
* Reference official examples

## Expo Best Practices

* Stay updated with Expo best practices
* Use Expo-recommended modules
* Follow Expo SDK compatibility matrix
* Participate in Expo community

## React Native Updates

* Stay current with React Native best practices
* Monitor React Native releases
* Update when Expo supports new RN version
* Test React Native changes

## Native Dependencies

* iOS: Manage pods via Podfile
* Android: Manage gradle dependencies
* Keep native dependencies in sync with JS
* Test native features after updates

## Breaking Changes

* Always read CHANGELOG before upgrading
* Test breaking changes thoroughly
* Update code for API changes
* Plan migration strategy

## Dependency Audit

* Audit dependencies for unused packages
* Remove unused dependencies regularly
* Check bundle size impact
* Optimize dependency tree

## Testing Upgrades

* Test critical features after upgrades
* Run full test suite
* Test on both iOS and Android
* Verify performance hasn't degraded

## Lock Files

* Commit package-lock.json
* Commit Podfile.lock for iOS
* Don't modify lock files manually
* Regenerate when needed

## Major Dependencies

* Track major dependency versions:
  * expo-* modules
  * react-navigation
  * react-native-ble-plx
  * firebase
  * i18next
* Plan upgrades for major versions

## Compatibility Matrix

* Maintain compatibility matrix
* Test cross-dependency compatibility
* Document known issues
* Track compatibility problems

## Build Dependencies

* Separate build dependencies
* Use devDependencies for development tools
* Don't include dev dependencies in production
* Optimize dependency installation

## Upgrade Strategy

* Upgrade one dependency at a time
* Test each upgrade independently
* Create upgrade branches
* Merge after successful testing

## Dependency Documentation

* Document why each dependency is needed
* Update dependency decisions regularly
* Keep upgrade history
* Share upgrade notes with team

## Automated Checks

* Use dependabot or similar for alerts
* Set up automated vulnerability scanning
* Configure CI/CD dependency checks
* Alert on outdated dependencies

## Performance Monitoring

* Monitor bundle size changes
* Track dependency impact on build times
* Profile app performance after upgrades
* Optimize when necessary
