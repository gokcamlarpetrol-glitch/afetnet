---
description: Testing and quality assurance standards including Jest, E2E, and health checks
globs: ["src/**/*.test.{ts,tsx}", "tests/**/*.{ts,tsx}", "**/*.spec.{ts,tsx}"]
alwaysApply: false
---

# Testing & Quality Assurance

## Unit Tests

* Write unit tests with Jest for all services and utilities: `src/**/*.test.ts`
* Test business logic, utilities, and pure functions in isolation
* Mock external dependencies (network, storage, native modules)
* Aim for >70% code coverage on critical paths
* Example test structure: `src/lib/crypto.test.ts`

## Integration Tests

* Write integration tests in `tests/integration/` for cross-module workflows
* Test services working together, not in isolation
* Test data flow across modules
* Verify state management integration
* Example: Test mesh network with BLE integration

## E2E Tests

* Write E2E tests in `tests/e2e/` for critical user flows
* Test complete user journeys: SOS flow, mesh pairing, EEW alerts
* Test on real devices or emulators
* Use detox or similar E2E framework
* Report in `reports/e2e-report.md`

## Native Module Mocking

* Mock native modules in unit tests: BLE, location, sensors, notifications
* Create mock implementations for native functionality
* Test both success and failure scenarios
* Example: Mock `react-native-ble-plx` for BLE tests

## Error Boundary Testing

* Test ErrorBoundary components work correctly
* Test fallback UI displays properly
* Test error recovery flows
* Verify errors don't crash the app

## State Management Testing

* Test Zustand stores independently
* Test state transitions and edge cases
* Test async actions in stores
* Verify store subscriptions work

## Component Testing

* Test React components with React Testing Library
* Test user interactions, not implementation details
* Test accessibility features
* Test conditional rendering

## Health Checks

* Use `src/diagnostics/health.ts` for system health validation
* Run health checks: `npm run healthcheck`
* Monitor critical services and dependencies
* Alert on health check failures

## Coverage Targets

* Aim for >70% coverage on critical paths
* Critical paths: crypto, mesh, eew, security modules
* Prioritize security and core functionality testing
* Use coverage reports to identify gaps

## Type Checking

* Use TypeScript for type safety: `npm run typecheck`
* Run typecheck in CI/CD pipeline
* Fix type errors before committing
* Use strict mode when possible

## Linting

* Use ESLint for code quality: `npm run lint`
* Follow project ESLint configuration: `eslint.config.js`
* Fix linting errors before committing
* Integrate linting in pre-commit hooks

## Prop Validation

* Use TypeScript interfaces for prop validation
* Or use PropTypes for runtime validation
* Document prop requirements
* Test prop validation behavior

## Accessibility Testing

* Test with automated accessibility tools
* Test with TalkBack (Android) and VoiceOver (iOS)
* Verify accessibility labels and roles
* Test keyboard navigation where applicable

## Performance Testing

* Profile performance with React DevTools Profiler
* Monitor memory usage and leaks
* Test with low-end devices
* Verify 60fps animations

## Security Testing

* Test input sanitization and validation
* Test authentication and authorization
* Test encryption and secure storage
* Perform security audits

## Test Organization

* Group tests by feature or module
* Use descriptive test names
* Follow AAA pattern: Arrange, Act, Assert
* Keep tests focused and readable

## Test Data

* Use factories or builders for test data
* Mock external APIs consistently
* Create reusable test utilities
* Clean up test data after tests

## Continuous Testing

* Run tests in CI/CD pipeline
* Fail builds on test failures
* Run tests before deployment
* Monitor test execution times

## Test Maintenance

* Update tests when code changes
* Remove obsolete tests
* Refactor tests for maintainability
* Document test requirements

## Critical Flow Testing

* Prioritize testing critical user flows
* Test emergency features thoroughly: SOS, mesh, EEW
* Test offline functionality
* Test error recovery

## Regression Testing

* Run full test suite before releases
* Test known bug fixes
* Test edge cases and boundary conditions
* Maintain regression test suite
