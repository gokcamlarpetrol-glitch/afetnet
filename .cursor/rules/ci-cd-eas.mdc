---
description: CI/CD workflows with EAS Build and deployment automation
globs: ["eas.json", "app.config.ts", "package.json", "scripts/**/*.js", ".github/**/*"]
alwaysApply: false
---

# CI/CD with EAS Build

## EAS Build Configuration

* Configure EAS Build profiles in `eas.json`
* Define profiles: development, preview, production
* Use appropriate build configuration for each profile
* Example build command: `eas build -p ios --profile production`

## Build Profiles

* Use development profile for local testing
* Use preview profile for staging/testing
* Use production profile for App Store/Play Store releases
* Configure environment variables per profile

## iOS Code Signing

* Configure iOS code signing via app.config.ts and Apple Developer Portal
* Use EAS-managed certificates or provide your own
* Match signing certificates to app capabilities
* Verify signing configuration before builds

## Android Keystores

* Store Android keystores securely in EAS secrets
* Never commit keystores to repository
* Use different keystores for debug and release
* Backup keystores securely

## Pre-Build Checks

* Run pre-build checks in CI/CD pipeline:
  * `npm run typecheck` - TypeScript validation
  * `npm run lint` - ESLint checking
  * `npm run test` - Unit and integration tests
* Fail builds on check failures
* Run checks before submitting build

## EAS Build and Updates

* Use Expo's EAS Build for cross-platform builds
* Use EAS Updates for Over-The-Air (OTA) updates
* Configure update channels per environment
* Test updates before production deployment

## Post-Build Validation

* Validate builds after completion
* Check build artifacts and sizes
* Run smoke tests on built apps
* Follow `ARCHIVE_CHECKLIST.md` for validation

## Build Performance

* Monitor build times and optimize
* Cache dependencies appropriately
* Use EAS build cache for faster builds
* Parallelize builds when possible

## Environment Variables

* Configure environment variables per build profile
* Store secrets in EAS secrets, not in code
* Use different configs for dev/staging/production
* Example: EEW_ENABLED, EEW_WS_URLS for earthquake warnings

## Automated Testing

* Run automated tests in CI/CD
* Use GitHub Actions or similar for CI
* Test on multiple platform versions
* Run E2E tests on built apps

## Deployment Automation

* Automate App Store and Play Store submissions
* Use fastlane or EAS Submit for automation
* Configure automatic submission workflows
* Handle submission failures gracefully

## Build Notifications

* Notify team of build status
* Send build results to Slack or email
* Alert on build failures
* Track build history

## Version Management

* Update versions automatically or manually
* Use semantic versioning (major.minor.patch)
* Update app.json/app.config.ts versions
* Tag releases in Git

## Dependency Management

* Lock dependencies in package-lock.json
* Update dependencies cautiously
* Run `npm audit` for security checks
* Test dependency updates thoroughly

## Build Artifacts

* Store build artifacts securely
* Archive builds for debugging
* Distribute builds to testers
* Manage build retention policies

## Rollback Plan

* Implement rollback procedures
* Keep previous builds available
* Document rollback steps
* Test rollback scenarios

## Monitoring and Alerts

* Monitor build success rates
* Alert on frequent build failures
* Track build duration trends
* Optimize slow builds

## Documentation

* Document build and deployment procedures
* Keep deployment checklists updated
* Document rollback procedures
* Share knowledge with team

## Release Notes

* Generate release notes automatically
* Include bug fixes and features
* Test release note generation
* Review release notes before submission

## App Store Connect

* Configure App Store Connect for iOS
* Set up API keys for automation
* Configure Play Console for Android
* Automate metadata submissions

## Build Verification

* Verify builds on real devices
* Test critical features after build
* Smoke test on multiple devices
* Check performance after build
