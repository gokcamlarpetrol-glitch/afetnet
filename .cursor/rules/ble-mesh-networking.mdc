---
description: BLE mesh and offline networking best practices
globs: ["src/ble/**/*.ts", "src/mesh/**/*.ts", "src/offmesh/**/*.ts", "src/offline/**/*.ts"]
alwaysApply: false
---

# BLE Mesh & Offline Networking

## BLE Manager

* Use `src/ble/manager.ts` as the single source of truth for BLE operations
* Centralize all BLE logic in the manager
* Don't access native BLE modules directly
* Example: `import { bleManager } from '@/ble/manager'`

## Platform-Specific BLE

* Use platform-specific implementations: `ble.android.ts` vs `ble.ios.ts`
* Handle iOS and Android BLE API differences properly
* Use Native Bridge: `src/ble/bridge.ts` for native communication
* Test BLE on both platforms

## Mesh Protocol

* Follow mesh/ modules for routing, topology, and TTL
* Implement proper mesh routing algorithms
* Handle mesh topology changes and node failures
* Use `src/mesh/` for mesh networking logic

## RSSI-Based Distance

* Use `src/algorithms/rssiGradient.ts` for distance estimation
* Calibrate RSSI measurements properly
* Handle RSSI fluctuations and noise
* Implement proper distance filtering

## Error Handling

* Wrap ALL BLE calls with try/catch blocks
* Handle BLE errors gracefully (disconnection, permission denied, etc.)
* Log BLE errors to diagnostics for debugging
* Provide fallback when BLE unavailable

## Permission Checking

* Check BLE permissions before operations using `src/ble/permissions.ts`
* Verify Bluetooth is enabled on device
* Request permissions if not granted
* Handle permission denial gracefully

## React Native Threading

* Be aware of React Native's threading model for BLE
* BLE operations run on native threads
* Batch BLE operations to reduce bridge overhead
* Use async/await for BLE operations

## BLE Operations Batching

* Batch BLE operations to reduce bridge calls
* Combine multiple characteristic reads/writes when possible
* Minimize connection/disconnection cycles
* Cache BLE scan results appropriately

## Mesh Routing

* Implement efficient mesh routing algorithms
* Handle TTL (time to live) for mesh messages
* Implement message deduplication
* Route messages around failed nodes

## Offline-First Networking

* Design for offline operation using `src/offline/` modules
* Queue messages when offline
* Sync when connectivity restored: `OfflineSyncManager`
* Handle offline/online transitions smoothly

## Off-Mesh Features

* Implement off-mesh features: `src/offmesh/` and `src/features/offmesh/`
* Support relay and gateway features
* Bridge mesh and cellular networks
* Handle off-mesh message routing

## Beacon Broadcasting

* Use `src/beacon/broadcaster.ts` for beacon operations
* Implement proper beacon UUID and major/minor values
* Handle beacon timeout and rotation
* Generate QR codes for easy pairing: `src/beacon/qr.tsx`

## Mesh Topology Management

* Track mesh topology changes
* Handle node joins and leaves
* Maintain routing tables
* Implement topology visualization

## Battery Efficiency

* Optimize BLE for battery efficiency
* Use appropriate BLE advertising intervals
* Implement connection parameters optimization
* Reduce unnecessary BLE scans

## BLE Codec

* Use `src/ble/codec.ts` for message encoding/decoding
* Implement efficient serialization
* Handle large message chunking
* Validate message integrity

## Mesh Security

* Secure mesh communications with encryption
* Implement proper key exchange
* Verify message authenticity
* Prevent replay attacks

## Testing BLE

* Mock BLE in unit tests: `src/test/`
* Test BLE scenarios: scan, connect, send, receive
* Test mesh routing and topology
* Test offline fallback

## BLE Monitoring

* Monitor BLE performance and reliability
* Log BLE operations for debugging
* Track connection stability
* Alert on BLE failures

## Constants and Configuration

* Use `src/ble/constants.ts` for BLE configuration
* Centralize BLE parameters
* Make BLE configurable for different scenarios
* Environment-specific BLE settings

## Safe BLE Operations

* Use `src/ble/SafeBLE.ts` for safe BLE operations
* Wrap BLE calls with error boundaries
* Implement retry logic for transient failures
* Handle BLE timeouts properly

## Mesh Coordination

* Implement mesh coordination protocols
* Handle mesh leadership election
* Coordinate mesh actions
* Implement mesh consensus mechanisms
