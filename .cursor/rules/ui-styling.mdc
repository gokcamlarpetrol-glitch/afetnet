---
description: UI and styling standards for React Native including responsive design and accessibility
globs: ["src/**/*.{tsx,ts}", "src/screens/**/*.tsx", "src/components/**/*.tsx"]
alwaysApply: false
---

# UI & Styling Standards

## Styling Approach

* Use StyleSheet.create() for consistent, performant styling
* Do NOT use inline styles or style props with plain objects
* Define styles outside render or use useMemo for dynamic styles
* Example:
  ```typescript
  const styles = StyleSheet.create({
    container: { flex: 1, padding: 16 },
    title: { fontSize: 18, fontWeight: 'bold' }
  });
  ```

## Responsive Design

* Use Flexbox for layout; it's the primary layout system in React Native
* Use expo's useWindowDimensions for responsive screen sizes
* Design mobile-first: start with smallest screens, scale up
* Test on various screen sizes: iPhone SE (small), iPhone Pro Max (large), Android tablets

## Dark Mode Support

* Implement dark mode using useColorScheme hook from expo
* Define color schemes in theme configuration
* Support both light and dark themes throughout the app
* Example:
  ```typescript
  const colorScheme = useColorScheme();
  const backgroundColor = colorScheme === 'dark' ? '#000' : '#fff';
  ```

## Safe Area Handling

* Use SafeAreaProvider from react-native-safe-area-context at app root
* Wrap screens with SafeAreaView for notch and inset handling
* Use SafeAreaView for top-level containers on iOS
* Example: App.tsx already wraps with SafeAreaProvider

## Accessibility (a11y)

* Add accessibilityLabel to ALL interactive elements
* Add accessibilityHint for complex interactions
* Use accessibilityRole for semantic meaning: button, link, header, etc.
* Test with TalkBack (Android) and VoiceOver (iOS)
* Example:
  ```typescript
  <TouchableOpacity
    accessibilityLabel="Emergency SOS button"
    accessibilityHint="Double tap to send emergency alert"
    accessibilityRole="button"
  >
  ```

## Dynamic Text Sizing

* Support user font scale preferences
* Use relative font sizes or allow text scaling
* Test with large text sizes to ensure UI doesn't break
* Avoid fixed font sizes for accessibility

## Gesture Handling

* Wrap app with GestureHandlerRootView for react-native-gesture-handler
* Use gesture handlers from react-native-gesture-handler for complex gestures
* Example: App.tsx already wraps with GestureHandlerRootView

## Touch Feedback

* Provide visual feedback on all touchable elements
* Use TouchableOpacity or TouchableHighlight for interactive elements
* Consider haptic feedback with expo-haptics for important actions
* Example: `import * as Haptics from 'expo-haptics';` then `Haptics.impactAsync()`

## Color and Typography

* Define a consistent color palette
* Use semantic color names: primary, secondary, error, success, warning
* Maintain consistent typography scale
* Ensure sufficient contrast ratios for accessibility (WCAG AA minimum)

## Layout Patterns

* Use Flexbox: flex, justifyContent, alignItems, flexDirection
* Avoid absolute positioning unless necessary
* Use padding and margin consistently via theme
* Implement consistent spacing scale (4, 8, 16, 24, 32, etc.)

## Platform-Specific UI

* Adapt UI for platform conventions (iOS vs Android)
* Use Platform.select() for platform-specific styles
* Example: Different shadow styles for iOS vs Android
* Consider Material Design (Android) vs Human Interface Guidelines (iOS)

## Loading States

* Show loading indicators for async operations
* Use ActivityIndicator or custom loading components
* Provide feedback during data fetching
* Avoid blocking UI during operations

## Error States

* Display user-friendly error messages
* Use visual error indicators (red borders, error icons)
* Provide retry options where applicable
* Test error state UI in both light and dark modes

## Empty States

* Design helpful empty states for lists without data
* Provide actionable guidance (e.g., "Pull to refresh")
* Use illustrations or icons to make empty states engaging

## Modal and Overlay

* Use clear modal backdrops and close buttons
* Ensure modals are dismissible with swipe or tap outside
* Keep modal content focused and scannable
* Test modals on various screen sizes

## Navigation UI

* Use consistent navigation patterns across app
* Follow platform navigation conventions (iOS vs Android)
* Implement proper header customization
* Support swipe-to-go-back gestures where appropriate

## Component Library

* Create reusable UI components in `src/components/`
* Follow consistent component API patterns
* Document component props and usage
* Examples: ErrorBoundary, StatusIndicator, MemoizedComponents

## Testing UI

* Visual regression testing for component library
* Test all UI states: loading, error, empty, success
* Test on real devices, not just simulators
* Validate accessibility with automated tools
